// Code generated by MockGen. DO NOT EDIT.
// Source: laboratory.go

// Package laboratory is a generated GoMock package.
package laboratory

import (
	reflect "reflect"
	"testing"

	gomock "github.com/golang/mock/gomock"
)

func TestNewMockCreatures(t *testing.T) {
	type args struct {
		ctrl *gomock.Controller
	}
	tests := []struct {
		name string
		args args
		want *MockCreatures
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewMockCreatures(tt.args.ctrl); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewMockCreatures() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockCreatures_EXPECT(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockCreaturesMockRecorder
	}
	tests := []struct {
		name   string
		fields fields
		want   *MockCreaturesMockRecorder
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockCreatures{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if got := m.EXPECT(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockCreatures.EXPECT() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockCreatures_Kind(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockCreaturesMockRecorder
	}
	tests := []struct {
		name   string
		fields fields
		want   string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockCreatures{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if got := m.Kind(); got != tt.want {
				t.Errorf("MockCreatures.Kind() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockCreaturesMockRecorder_Kind(t *testing.T) {
	type fields struct {
		mock *MockCreatures
	}
	tests := []struct {
		name   string
		fields fields
		want   *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockCreaturesMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.Kind(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockCreaturesMockRecorder.Kind() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockCreatures_Fly(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockCreaturesMockRecorder
	}
	tests := []struct {
		name   string
		fields fields
		want   bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockCreatures{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if got := m.Fly(); got != tt.want {
				t.Errorf("MockCreatures.Fly() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockCreaturesMockRecorder_Fly(t *testing.T) {
	type fields struct {
		mock *MockCreatures
	}
	tests := []struct {
		name   string
		fields fields
		want   *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockCreaturesMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.Fly(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockCreaturesMockRecorder.Fly() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockCreatures_Sound(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockCreaturesMockRecorder
	}
	tests := []struct {
		name   string
		fields fields
		want   string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockCreatures{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if got := m.Sound(); got != tt.want {
				t.Errorf("MockCreatures.Sound() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockCreaturesMockRecorder_Sound(t *testing.T) {
	type fields struct {
		mock *MockCreatures
	}
	tests := []struct {
		name   string
		fields fields
		want   *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockCreaturesMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.Sound(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockCreaturesMockRecorder.Sound() = %v, want %v", got, tt.want)
			}
		})
	}
}
