// Code generated by MockGen. DO NOT EDIT.
// Source: laboratory.go

// Package laboratory is a generated GoMock package.
package laboratory

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCreatures is a mock of Creatures interface
type MockCreatures struct {
	ctrl     *gomock.Controller
	recorder *MockCreaturesMockRecorder
}

// MockCreaturesMockRecorder is the mock recorder for MockCreatures
type MockCreaturesMockRecorder struct {
	mock *MockCreatures
}

// NewMockCreatures creates a new mock instance
func NewMockCreatures(ctrl *gomock.Controller) *MockCreatures {
	mock := &MockCreatures{ctrl: ctrl}
	mock.recorder = &MockCreaturesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreatures) EXPECT() *MockCreaturesMockRecorder {
	return m.recorder
}

// Kind mocks base method
func (m *MockCreatures) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind
func (mr *MockCreaturesMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockCreatures)(nil).Kind))
}

// Fly mocks base method
func (m *MockCreatures) Fly() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fly")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Fly indicates an expected call of Fly
func (mr *MockCreaturesMockRecorder) Fly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fly", reflect.TypeOf((*MockCreatures)(nil).Fly))
}

// Sound mocks base method
func (m *MockCreatures) Sound() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sound")
	ret0, _ := ret[0].(string)
	return ret0
}

// Sound indicates an expected call of Sound
func (mr *MockCreaturesMockRecorder) Sound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sound", reflect.TypeOf((*MockCreatures)(nil).Sound))
}
